package org.pentaho.di.dataset.spoon.xtpoint;

import org.pentaho.di.core.exception.KettleException;
import org.pentaho.di.core.extension.ExtensionPoint;
import org.pentaho.di.core.extension.ExtensionPointInterface;
import org.pentaho.di.core.logging.LogChannelInterface;
import org.pentaho.di.dataset.TransUnitTest;
import org.pentaho.di.dataset.spoon.DataSetHelper;
import org.pentaho.di.dataset.util.FactoriesHierarchy;
import org.pentaho.di.trans.TransMeta;
import org.pentaho.di.ui.core.dialog.EnterSelectionDialog;
import org.pentaho.di.ui.spoon.Spoon;

import java.util.ArrayList;
import java.util.List;

@ExtensionPoint( id = "AutoOpenTestExtensionPoint",
  extensionPointId = "TransAfterOpen",
  description = "Open the transformation unit test along with the transformation. Pick the one marked for auto opening."
)
public class AutoOpenTestExtensionPoint implements ExtensionPointInterface {
  @Override public void callExtensionPoint( LogChannelInterface log, Object object ) throws KettleException {

    // The transformation that was just loaded
    //
    TransMeta transMeta  = (TransMeta) object;

    // Running in Spoon...
    //
    Spoon spoon = Spoon.getInstance();
    DataSetHelper helper = DataSetHelper.getInstance();

    // Get the list of unit tests for this one...
    //
    List<TransUnitTest> tests = DataSetHelper.findTransformationUnitTest( transMeta, spoon.getMetaStore() );

    // See which ones are auto opening...
    //
    List<TransUnitTest> openTests = new ArrayList<>();
    tests.forEach( test -> {
      if (test.isAutoOpening()) {
        openTests.add(test);
      }
    });

    // Nothing to see here, move along!
    //
    if (openTests.isEmpty()) {
      return;
    }

    // A single test, simply select it.
    //
    if (openTests.size()>=1) {
      helper.getActiveTests().put( transMeta, openTests.get(0) );
      return;
    }

    /*
    // We have multiple tests, select which one...
    //
    String[] testNames = new String[openTests.size()];
    for (int i=0;i<testNames.length;i++) {
      testNames[i] = openTests.get( i ).getName();
    }
    EnterSelectionDialog dialog = new EnterSelectionDialog( spoon.getShell(), testNames, "Select unit test", "Select the unit test to open:");
    dialog.setMulti( false );
    String selection = dialog.open(0);
    if (selection!=null) {
      TransUnitTest selectedTest  = openTests.get( dialog.getSelectionNr() );
      helper.getActiveTests().put( transMeta, selectedTest );
    }
    */

  }
}
